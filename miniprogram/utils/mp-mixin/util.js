"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.creatEventReady = exports.pick = exports.mapToTarget = exports.deepClone = void 0;
function deepClone(object) {
    if (typeof object !== 'object') {
        return object;
    }
    var isArray = object instanceof Array;
    if (isArray) {
        return object.map(function (item) { return deepClone(item); });
    }
    else {
        var result = {};
        for (var k in object) {
            result[k] = deepClone(object[k]);
        }
        return result;
    }
}
exports.deepClone = deepClone;
function mapToTarget(_a) {
    var data = _a.data, target = _a.target, _b = _a.force, force = _b === void 0 ? false : _b;
    var ignoreList = [];
    for (var k in data) {
        if (force || typeof target[k] === 'undefined') {
            target[k] = data[k];
        }
        else {
            ignoreList.push(k);
        }
    }
    return ignoreList;
}
exports.mapToTarget = mapToTarget;
function pick(data, attributes) {
    if (attributes === void 0) { attributes = []; }
    var result = {};
    attributes.forEach(function (attr) {
        if (typeof data[attr] !== 'undefined') {
            result[attr] = data[attr];
        }
        ;
    });
    return result;
}
exports.pick = pick;
function creatEventReady() {
    var queue = [];
    var lastArgs = null;
    function onEventReady(fn) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (!queue.find(function (item) { return item.fn === fn; })) {
            queue.push({ fn: fn, args: args });
        }
        if (lastArgs !== null) {
            if (args.length === 0 && lastArgs) {
                args = lastArgs;
            }
            fn.apply(void 0, args);
        }
        return fn;
    }
    function eventReady() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        lastArgs = args;
        queue.forEach(function (item) {
            item.fn.apply(item, ((args.length === 0) ? item.args : args));
        });
    }
    function removeListener(listener) {
        var result = queue.find(function (item) { return item.fn === listener; });
        if (result) {
            queue.splice(queue.indexOf(result), 1);
        }
    }
    return {
        onEventReady: onEventReady,
        eventReady: eventReady,
        removeListener: removeListener,
    };
}
exports.creatEventReady = creatEventReady;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBV0EsU0FBZ0IsU0FBUyxDQUFFLE1BQVc7SUFDbEMsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDNUIsT0FBTyxNQUFNLENBQUM7S0FDakI7SUFDRCxJQUFNLE9BQU8sR0FBRyxNQUFNLFlBQVksS0FBSyxDQUFDO0lBQ3hDLElBQUksT0FBTyxFQUFFO1FBQ1QsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLFVBQUMsSUFBUyxJQUFLLE9BQUEsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFmLENBQWUsQ0FBQyxDQUFDO0tBQ3JEO1NBQU07UUFDSCxJQUFNLE1BQU0sR0FBVSxFQUFFLENBQUM7UUFDekIsS0FBSyxJQUFNLENBQUMsSUFBSSxNQUFNLEVBQUU7WUFDcEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sTUFBTSxDQUFDO0tBQ2pCO0FBQ0wsQ0FBQztBQWRELDhCQWNDO0FBRUQsU0FBZ0IsV0FBVyxDQUFFLEVBTTVCO1FBTEcsSUFBSSxVQUFBLEVBQUUsTUFBTSxZQUFBLEVBQUUsYUFBYSxFQUFiLEtBQUssbUJBQUcsS0FBSyxLQUFBO0lBTTNCLElBQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztJQUNoQyxLQUFLLElBQU0sQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNsQixJQUFJLEtBQUssSUFBSSxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxXQUFXLEVBQUU7WUFDM0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2QjthQUFNO1lBQ0gsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN0QjtLQUVKO0lBQ0QsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQztBQWpCRCxrQ0FpQkM7QUFFRCxTQUFnQixJQUFJLENBQUUsSUFBVyxFQUFFLFVBQThCO0lBQTlCLDJCQUFBLEVBQUEsZUFBOEI7SUFDN0QsSUFBTSxNQUFNLEdBQVUsRUFBRSxDQUFDO0lBQ3pCLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJO1FBQ25CLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssV0FBVyxFQUFFO1lBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUFFO1FBQUEsQ0FBQztJQUMxRSxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sTUFBTSxDQUFDO0FBQ2xCLENBQUM7QUFORCxvQkFNQztBQUVELFNBQWdCLGVBQWU7SUFFM0IsSUFBTSxLQUFLLEdBR0wsRUFBRSxDQUFDO0lBQ1QsSUFBSSxRQUFRLEdBQWUsSUFBSSxDQUFDO0lBRWhDLFNBQVMsWUFBWSxDQUFFLEVBQXdCO1FBQUUsY0FBWTthQUFaLFVBQVksRUFBWixxQkFBWSxFQUFaLElBQVk7WUFBWiw2QkFBWTs7UUFDekQsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBZCxDQUFjLENBQUMsRUFBRTtZQUNyQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxJQUFBLEVBQUUsSUFBSSxNQUFBLEVBQUMsQ0FBQyxDQUFDO1NBQzFCO1FBQ0QsSUFBSSxRQUFRLEtBQUssSUFBSSxFQUFFO1lBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksUUFBUSxFQUFFO2dCQUMvQixJQUFJLEdBQUcsUUFBUSxDQUFDO2FBQ25CO1lBQ0QsRUFBRSxlQUFJLElBQUksRUFBRTtTQUNmO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsU0FBUyxVQUFVO1FBQUUsY0FBWTthQUFaLFVBQVksRUFBWixxQkFBWSxFQUFaLElBQVk7WUFBWix5QkFBWTs7UUFDN0IsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNoQixLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsSUFBSTtZQUNkLElBQUksQ0FBQyxFQUFFLE9BQVAsSUFBSSxFQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUN6RCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxTQUFTLGNBQWMsQ0FBRSxRQUFrQjtRQUN2QyxJQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxDQUFDLEVBQUUsS0FBSyxRQUFRLEVBQXBCLENBQW9CLENBQUMsQ0FBQztRQUN4RCxJQUFJLE1BQU0sRUFBRTtZQUNSLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUMxQztJQUNMLENBQUM7SUFFRCxPQUFPO1FBQ0gsWUFBWSxjQUFBO1FBQ1osVUFBVSxZQUFBO1FBQ1YsY0FBYyxnQkFBQTtLQUNqQixDQUFDO0FBQ04sQ0FBQztBQXpDRCwwQ0F5Q0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiB0YWNrY2hlblxyXG4gKiBARGF0ZTogMjAyMS0wNS0wMSAxOTo0OToyOFxyXG4gKiBATGFzdEVkaXRvcnM6IHRoZWFqYWNrXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjEtMDUtMTIgMDA6NTM6MTlcclxuICogQEZpbGVQYXRoOiBcXG1wLW1peGluXFxzcmNcXHV0aWwudHNcclxuICogQERlc2NyaXB0aW9uOiBDb2Rpbmcgc29tZXRoaW5nXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtJRXZlbnRSZWFkeSwgSUpzb259IGZyb20gJy4vdHlwZSc7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVlcENsb25lIChvYmplY3Q6IGFueSk6IGFueSB7XHJcbiAgICBpZiAodHlwZW9mIG9iamVjdCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICByZXR1cm4gb2JqZWN0O1xyXG4gICAgfVxyXG4gICAgY29uc3QgaXNBcnJheSA9IG9iamVjdCBpbnN0YW5jZW9mIEFycmF5O1xyXG4gICAgaWYgKGlzQXJyYXkpIHtcclxuICAgICAgICByZXR1cm4gb2JqZWN0Lm1hcCgoaXRlbTogYW55KSA9PiBkZWVwQ2xvbmUoaXRlbSkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBjb25zdCByZXN1bHQ6IElKc29uID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBrIGluIG9iamVjdCkge1xyXG4gICAgICAgICAgICByZXN1bHRba10gPSBkZWVwQ2xvbmUob2JqZWN0W2tdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvVGFyZ2V0ICh7XHJcbiAgICBkYXRhLCB0YXJnZXQsIGZvcmNlID0gZmFsc2VcclxufToge1xyXG4gIGRhdGE6IElKc29uO1xyXG4gIHRhcmdldDogSUpzb247XHJcbiAgZm9yY2U/OiBib29sZWFuO1xyXG59KTogc3RyaW5nW10ge1xyXG4gICAgY29uc3QgaWdub3JlTGlzdDogc3RyaW5nW10gPSBbXTtcclxuICAgIGZvciAoY29uc3QgayBpbiBkYXRhKSB7XHJcbiAgICAgICAgaWYgKGZvcmNlIHx8IHR5cGVvZiB0YXJnZXRba10gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHRhcmdldFtrXSA9IGRhdGFba107XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWdub3JlTGlzdC5wdXNoKGspO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuICAgIHJldHVybiBpZ25vcmVMaXN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGljayAoZGF0YTogSUpzb24sIGF0dHJpYnV0ZXM6IEFycmF5PHN0cmluZz4gPSBbXSkge1xyXG4gICAgY29uc3QgcmVzdWx0OiBJSnNvbiA9IHt9O1xyXG4gICAgYXR0cmlidXRlcy5mb3JFYWNoKGF0dHIgPT4ge1xyXG4gICAgICAgIGlmICh0eXBlb2YgZGF0YVthdHRyXSAhPT0gJ3VuZGVmaW5lZCcpIHsgcmVzdWx0W2F0dHJdID0gZGF0YVthdHRyXTsgfTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0RXZlbnRSZWFkeTxUID0gYW55PiAoKTogSUV2ZW50UmVhZHk8VD4ge1xyXG5cclxuICAgIGNvbnN0IHF1ZXVlOiB7XHJcbiAgICAgICAgZm46IEZ1bmN0aW9uO1xyXG4gICAgICAgIGFyZ3M6IFRbXTtcclxuICAgIH1bXSA9IFtdO1xyXG4gICAgbGV0IGxhc3RBcmdzOiBUW10gfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBmdW5jdGlvbiBvbkV2ZW50UmVhZHkgKGZuOiAoLi4uYXJnczogVFtdKT0+dm9pZCwgLi4uYXJnczogVFtdKSB7XHJcbiAgICAgICAgaWYgKCFxdWV1ZS5maW5kKGl0ZW0gPT4gaXRlbS5mbiA9PT0gZm4pKSB7XHJcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goe2ZuLCBhcmdzfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsYXN0QXJncyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDAgJiYgbGFzdEFyZ3MpIHtcclxuICAgICAgICAgICAgICAgIGFyZ3MgPSBsYXN0QXJncztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmbiguLi5hcmdzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmbjtcclxuICAgIH1cclxuICAgICBcclxuICAgIGZ1bmN0aW9uIGV2ZW50UmVhZHkgKC4uLmFyZ3M6IFRbXSkge1xyXG4gICAgICAgIGxhc3RBcmdzID0gYXJncztcclxuICAgICAgICBxdWV1ZS5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpdGVtLmZuKC4uLigoYXJncy5sZW5ndGggPT09IDApID8gaXRlbS5hcmdzIDogYXJncykpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyIChsaXN0ZW5lcjogRnVuY3Rpb24pIHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSBxdWV1ZS5maW5kKGl0ZW0gPT4gaXRlbS5mbiA9PT0gbGlzdGVuZXIpO1xyXG4gICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgcXVldWUuc3BsaWNlKHF1ZXVlLmluZGV4T2YocmVzdWx0KSwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgb25FdmVudFJlYWR5LFxyXG4gICAgICAgIGV2ZW50UmVhZHksXHJcbiAgICAgICAgcmVtb3ZlTGlzdGVuZXIsXHJcbiAgICB9O1xyXG59Il19