"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports._globalMixin = exports._mixinGlobal = exports.mixinCurrent = exports.mixinData = void 0;
var store_1 = require("./store");
var util_1 = require("./util");
var globalMixins;
var pageLifeTimeNames = [
    'onLoad',
    'onShow',
    'onReady',
    'onHide',
    'onShow',
    'onUnload',
    'onPullDownRefresh',
    'onReachBottom',
    'onShareAppMessage',
    'onShareTimeline',
    'onAddToFavorites',
    'onPageScroll',
    'onResize',
    'onTabItemTap',
];
function mixinData(options, data) {
    if (typeof data === 'undefined' || typeof options.data === 'undefined')
        return;
    util_1.mapToTarget({
        data: data,
        target: options.data
    });
}
exports.mixinData = mixinData;
function mixinMethods(options, methods, type) {
    if (type === void 0) { type = 0; }
    if (!methods)
        return;
    var isComponent = type === 1;
    if (isComponent && !options.methods) {
        options.methods = {};
    }
    util_1.mapToTarget({
        data: methods,
        target: isComponent ?
            options.methods :
            options
    });
}
function mixinLifeTimes(options, mixin) {
    var leftTimes = util_1.pick(mixin, pageLifeTimeNames);
    util_1.mapToTarget({
        data: leftTimes,
        target: options
    });
    markUnload(options);
}
function markUnload(leftTimes, type) {
    if (type === void 0) { type = 0; }
    var markUnloadFlag = function () {
        this.__unload = true;
    };
    var name = type === 0 ? 'onUnload' : 'detached';
    if (leftTimes[name]) {
        var nativeMethod_1 = leftTimes[name];
        leftTimes[name] = function () {
            nativeMethod_1.call(this);
            markUnloadFlag.call(this);
        };
    }
    else {
        leftTimes[name] = markUnloadFlag;
    }
}
function mixinComponentLifeTimes(options, mixin) {
    var leftTimes = mixin.lifetimes;
    if (!options.lifetimes) {
        options.lifetimes = {};
    }
    if (leftTimes) {
        util_1.mapToTarget({
            data: leftTimes,
            target: options.lifetimes
        });
    }
    markUnload(options.lifetimes, 1);
    var pageLiftTimes = mixin.pageLifetimes;
    if (pageLiftTimes) {
        if (!options.pageLifetimes) {
            options.pageLifetimes = {};
        }
        util_1.mapToTarget({
            data: pageLiftTimes,
            target: options.pageLifetimes
        });
    }
}
function mixinCurrent(_a) {
    var options = _a.options, mixin = _a.mixin, _b = _a.global, global = _b === void 0 ? false : _b, _c = _a.type, type = _c === void 0 ? 0 : _c, storeTool = _a.storeTool;
    if (typeof mixin === 'undefined') {
        mixin = options.mixin;
    }
    if (typeof mixin === 'undefined') {
        return options;
    }
    mixin = util_1.deepClone(mixin);
    if (type === 0) {
        mixinLifeTimes(options, mixin);
    }
    else if (type === 1) {
        mixinComponentLifeTimes(options, mixin);
    }
    mixinData(options, mixin.data);
    mixinMethods(options, mixin.methods, type);
    store_1.injectStore({ options: options, mixinStore: mixin.store, global: global, storeTool: storeTool });
    return options;
}
exports.mixinCurrent = mixinCurrent;
function _mixinGlobal(_a) {
    var options = _a.options, type = _a.type, storeTool = _a.storeTool;
    return mixinCurrent({
        options: options,
        mixin: globalMixins,
        global: true,
        type: type,
        storeTool: storeTool
    });
}
exports._mixinGlobal = _mixinGlobal;
function _globalMixin(mixin) {
    globalMixins = mixin;
    store_1.checkGlobalMixinStore(mixin.store);
}
exports._globalMixin = _globalMixin;
//# sourceMappingURL=data:application/json;base64,