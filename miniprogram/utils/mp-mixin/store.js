"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectStore = exports.checkGlobalMixinStore = exports._initGlobalStore = exports.initStoreHacker = exports._createStore = void 0;
var util_1 = require("./util");
var globalStore;
var storeId = 0;
function _createStore(state) {
    var currentId = ++storeId;
    var attrMap = {};
    var getAttrs = function (setDataAttr) {
        if (!attrMap[setDataAttr]) {
            attrMap[setDataAttr] = handleSetDataAttr(setDataAttr);
        }
        return attrMap[setDataAttr];
    };
    var _a = util_1.creatEventReady(), onEventReady = _a.onEventReady, eventReady = _a.eventReady;
    var modifyState = function (attrs, value, setDataAttr) {
        var data = state;
        var last = attrs.length - 1;
        attrs.forEach(function (attr, index) {
            var _a;
            if (index === last) {
                data[attr] = value;
                eventReady((_a = {}, _a[setDataAttr] = value, _a));
            }
            else {
                if (typeof data[attr] === 'undefined') {
                    throw new Error("Error setData:" + setDataAttr);
                }
                data = data[attr];
            }
        });
    };
    return {
        state: state,
        __: {
            _id: currentId,
            _injectContext: function (currentContext, storeTool) {
                if (storeTool._store[currentId].inited) {
                    return;
                }
                storeTool._context = currentContext;
                storeTool._store[currentId].inited = true;
                hackSetData(currentContext, currentId, storeTool);
                onEventReady(function (data) {
                    storeTool._nativeSetData.call(currentContext, data);
                });
            },
            _hitState: function (setDataAttr, value, ignoreList) {
                var attrs = getAttrs(setDataAttr);
                var modifyAttr = attrs[0];
                if (typeof state[modifyAttr] === 'undefined' || ignoreList.indexOf(modifyAttr) !== -1) {
                    return false;
                }
                modifyState(attrs, value, setDataAttr);
                return true;
            }
        }
    };
}
exports._createStore = _createStore;
function hackSetData(context, storeId, storeTool) {
    var nativeSetData = context.setData;
    if (!storeTool._setDataList) {
        storeTool._setDataList = [];
        storeTool._nativeSetData = nativeSetData;
        context.setData = function (data, callback) {
            storeTool._setDataList.forEach(function (fn) { return fn(data); });
            return nativeSetData.call(context, data, callback);
        };
    }
    storeTool._setDataList.push(function (data) {
        var _a = storeTool._store[storeId], store = _a.store, ignoreList = _a.ignoreList;
        for (var k in data) {
            store.__._hitState(k, data[k], ignoreList);
        }
    });
}
function handleSetDataAttr(attr) {
    attr = attr.replace(/\[/g, '.').replace(/\]/g, '');
    return attr.split('.');
}
function initStoreHacker(_a) {
    var options = _a.options, type = _a.type, storeTool = _a.storeTool;
    var stores = storeTool._store;
    if (stores) {
        for (var k in stores) {
            handleStore({
                options: options,
                store: stores[k].store,
                type: type,
                storeTool: storeTool
            });
        }
    }
}
exports.initStoreHacker = initStoreHacker;
function readOnloadLifeTime(options, type) {
    if (type === 0) {
        return options.onLoad;
    }
    else if (type === 1) {
        if (options.lifetimes) {
            return options.lifetimes.attached;
        }
    }
    return null;
}
function writeOnloadLifeTime(options, type, func) {
    if (type === 0) {
        options.onLoad = func;
    }
    else if (type === 1) {
        if (!options.lifetimes) {
            options.lifetimes = {};
        }
        options.lifetimes.attached = func;
    }
}
function handleStore(_a) {
    var options = _a.options, store = _a.store, type = _a.type, storeTool = _a.storeTool;
    if (!store)
        return;
    var setDataHacker = function () {
        store.__._injectContext(this, storeTool);
    };
    var nativeOnLoad = readOnloadLifeTime(options, type);
    if (!nativeOnLoad) {
        writeOnloadLifeTime(options, type, setDataHacker);
    }
    else {
        if (!storeTool._onLoadList) {
            storeTool._onLoadList = [];
            var onLoadHacker = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                storeTool._onLoadList.forEach(function (fn) { return fn.call(_this); });
                nativeOnLoad.apply(this, args);
            };
            writeOnloadLifeTime(options, type, onLoadHacker);
        }
        storeTool._onLoadList.push(setDataHacker);
    }
}
function _initGlobalStore(state) {
    globalStore = ((!state.__) ? _createStore(state) : state);
    return globalStore;
}
exports._initGlobalStore = _initGlobalStore;
function checkGlobalMixinStore(store) {
    if (!store)
        return;
    _initGlobalStore(store);
}
exports.checkGlobalMixinStore = checkGlobalMixinStore;
function injectStore(_a) {
    var options = _a.options, mixinStore = _a.mixinStore, storeTool = _a.storeTool, _b = _a.global, global = _b === void 0 ? false : _b;
    var store = ((global) ? globalStore : (options.store || mixinStore));
    if (!store)
        return;
    if (!storeTool._store) {
        storeTool._store = {};
    }
    ;
    storeTool._store[store.__._id] = {
        store: store,
        ignoreList: util_1.mapToTarget({
            data: store.state,
            target: options.data
        })
    };
}
exports.injectStore = injectStore;
//# sourceMappingURL=data:application/json;base64,