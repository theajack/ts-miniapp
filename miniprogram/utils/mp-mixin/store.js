"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectStore = exports.checkGlobalMixinStore = exports._initGlobalStore = exports.initStoreHacker = exports._createStore = void 0;
var util_1 = require("./util");
var globalStore;
var storeId = 0;
function _createStore(state) {
    var currentId = ++storeId;
    var attrMap = {};
    var getAttrs = function (setDataAttr) {
        if (!attrMap[setDataAttr]) {
            attrMap[setDataAttr] = handleSetDataAttr(setDataAttr);
        }
        return attrMap[setDataAttr];
    };
    var _a = util_1.creatEventReady(), onEventReady = _a.onEventReady, eventReady = _a.eventReady;
    var modifyState = function (attrs, value, setDataAttr) {
        var data = state;
        var last = attrs.length - 1;
        attrs.forEach(function (attr, index) {
            var _a;
            if (index === last) {
                data[attr] = value;
                eventReady((_a = {}, _a[setDataAttr] = value, _a));
            }
            else {
                if (typeof data[attr] === 'undefined') {
                    throw new Error("Error setData:" + setDataAttr);
                }
                data = data[attr];
            }
        });
    };
    return {
        state: state,
        __: {
            _id: currentId,
            _injectContext: function (currentContext) {
                var mixin = currentContext.__mixin;
                if (mixin._store[currentId].inited) {
                    return;
                }
                mixin._context = currentContext;
                mixin._store[currentId].inited = true;
                hackSetData(currentContext, currentId);
                onEventReady(function (data) {
                    mixin._nativeSetData.call(currentContext, data);
                });
            },
            _hitState: function (setDataAttr, value, ignoreList) {
                var attrs = getAttrs(setDataAttr);
                var modifyAttr = attrs[0];
                if (typeof state[modifyAttr] === 'undefined' || ignoreList.includes(modifyAttr)) {
                    return false;
                }
                modifyState(attrs, value, setDataAttr);
                return true;
            }
        }
    };
}
exports._createStore = _createStore;
function hackSetData(context, storeId) {
    var nativeSetData = context.setData;
    var mixin = context.__mixin;
    if (!mixin._setDataList) {
        mixin._setDataList = [];
        mixin._nativeSetData = nativeSetData;
        context.setData = function (data, callback) {
            mixin._setDataList.forEach(function (fn) { return fn(data); });
            return nativeSetData.call(context, data, callback);
        };
    }
    mixin._setDataList.push(function (data) {
        var _a = mixin._store[storeId], store = _a.store, ignoreList = _a.ignoreList;
        for (var k in data) {
            store.__._hitState(k, data[k], ignoreList);
        }
    });
}
function handleSetDataAttr(attr) {
    attr = attr.replace(/\[/g, '.').replace(/\]/g, '');
    return attr.split('.');
}
function initStoreHacker(options) {
    var stores = options.__mixin._store;
    if (stores) {
        for (var k in stores) {
            handleStore(options, stores[k].store);
        }
    }
}
exports.initStoreHacker = initStoreHacker;
function handleStore(options, store) {
    if (!store)
        return;
    var setDataHacker = function () {
        store.__._injectContext(this);
    };
    if (!options.onLoad) {
        options.onLoad = setDataHacker;
    }
    else {
        var nativeOnLoad_1 = options.onLoad;
        var mixin_1 = options.__mixin;
        if (!mixin_1._onLoadList) {
            mixin_1._onLoadList = [];
            options.onLoad = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                mixin_1._onLoadList.forEach(function (fn) { return fn.call(_this); });
                nativeOnLoad_1.apply(this, args);
            };
        }
        mixin_1._onLoadList.push(setDataHacker);
    }
}
function _initGlobalStore(state) {
    globalStore = ((!state.__) ? _createStore(state) : state);
    return globalStore;
}
exports._initGlobalStore = _initGlobalStore;
function checkGlobalMixinStore(store) {
    if (!store)
        return;
    _initGlobalStore(store);
}
exports.checkGlobalMixinStore = checkGlobalMixinStore;
function injectStore(options, mixinStore, global) {
    if (global === void 0) { global = false; }
    var store = ((global) ? globalStore : (options.store || mixinStore));
    if (!store)
        return;
    var mixin = options.__mixin;
    if (!mixin._store) {
        mixin._store = {};
    }
    ;
    mixin._store[store.__._id] = {
        store: store,
        ignoreList: util_1.mapToTarget({
            data: store.state,
            target: options.data
        })
    };
}
exports.injectStore = injectStore;
//# sourceMappingURL=data:application/json;base64,