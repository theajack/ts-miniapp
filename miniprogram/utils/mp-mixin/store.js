"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectStore = exports.checkGlobalMixinStore = exports._initGlobalStore = exports.initStoreHacker = exports._createStore = void 0;
var util_1 = require("./util");
var globalStore;
var storeId = 0;
function _createStore(state) {
    var currentId = ++storeId;
    var attrMap = {};
    var getAttrs = function (setDataAttr) {
        if (!attrMap[setDataAttr]) {
            attrMap[setDataAttr] = handleSetDataAttr(setDataAttr);
        }
        return attrMap[setDataAttr];
    };
    var _a = util_1.creatEventReady(), onEventReady = _a.onEventReady, eventReady = _a.eventReady, removeListener = _a.removeListener;
    var modifyState = function (attrs, value, setDataAttr, newContext) {
        var data = state;
        var last = attrs.length - 1;
        attrs.forEach(function (attr, index) {
            var _a;
            if (index === last) {
                data[attr] = value;
                eventReady((_a = {}, _a[setDataAttr] = value, _a), newContext);
            }
            else {
                if (typeof data[attr] === 'undefined') {
                    throw new Error("Error setData:" + setDataAttr);
                }
                data = data[attr];
            }
        });
    };
    return {
        state: state,
        __: {
            _id: currentId,
            _injectContext: function (currentContext, storeTool, type) {
                hackSetData(currentContext, currentId, storeTool);
                var listener = onEventReady(function (data, newContext) {
                    if (currentContext !== newContext) {
                        console.log('onEventReady', data);
                        storeTool._nativeSetData.call(currentContext, data);
                    }
                });
                if (type === 0) {
                    var nativeUnload_1 = currentContext.onUnload;
                    currentContext.onUnload = function () {
                        removeListener(listener);
                        nativeUnload_1.call(currentContext);
                    };
                }
                else {
                }
            },
            _hitState: function (setDataAttr, value, ignoreList, newContext) {
                var attrs = getAttrs(setDataAttr);
                var modifyAttr = attrs[0];
                if (typeof state[modifyAttr] === 'undefined' || ignoreList.indexOf(modifyAttr) !== -1) {
                    return false;
                }
                modifyState(attrs, value, setDataAttr, newContext);
                return true;
            }
        }
    };
}
exports._createStore = _createStore;
function hackSetData(context, storeId, storeTool) {
    var nativeSetData = context.setData;
    if (!context._setDataList) {
        context._setDataList = [];
        storeTool._nativeSetData = nativeSetData;
        context.setData = function (data, callback) {
            context._setDataList.forEach(function (fn) { return fn(data); });
            console.log('nativeSetData.call(context, data, callback);', data);
            return nativeSetData.call(context, data, callback);
        };
    }
    context._setDataList.push(function (data) {
        var _a = storeTool._store[storeId], store = _a.store, ignoreList = _a.ignoreList;
        for (var k in data) {
            store.__._hitState(k, data[k], ignoreList, context);
        }
    });
}
function handleSetDataAttr(attr) {
    attr = attr.replace(/\[/g, '.').replace(/\]/g, '');
    return attr.split('.');
}
function initStoreHacker(_a) {
    var options = _a.options, type = _a.type, storeTool = _a.storeTool;
    var stores = storeTool._store;
    if (stores) {
        for (var k in stores) {
            handleStore({
                options: options,
                store: stores[k].store,
                type: type,
                storeTool: storeTool
            });
        }
    }
}
exports.initStoreHacker = initStoreHacker;
function readOnloadLifeTime(options, type) {
    if (type === 0) {
        return options.onLoad;
    }
    else if (type === 1) {
        if (options.lifetimes) {
            return options.lifetimes.attached;
        }
    }
    return null;
}
function writeOnloadLifeTime(options, type, func) {
    if (type === 0) {
        options.onLoad = func;
    }
    else if (type === 1) {
        if (!options.lifetimes) {
            options.lifetimes = {};
        }
        options.lifetimes.attached = func;
    }
}
function handleStore(_a) {
    var options = _a.options, store = _a.store, type = _a.type, storeTool = _a.storeTool;
    if (!store)
        return;
    var setDataHacker = function () {
        store.__._injectContext(this, storeTool, type);
    };
    var nativeOnLoad = readOnloadLifeTime(options, type);
    if (!nativeOnLoad) {
        writeOnloadLifeTime(options, type, setDataHacker);
    }
    else {
        if (!storeTool._onLoadList) {
            storeTool._onLoadList = [];
            var onLoadHacker = function () {
                var _this = this;
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                storeTool._onLoadList.forEach(function (fn) { return fn.call(_this); });
                nativeOnLoad.apply(this, args);
            };
            writeOnloadLifeTime(options, type, onLoadHacker);
        }
        storeTool._onLoadList.push(setDataHacker);
    }
}
function _initGlobalStore(state) {
    globalStore = ((!state.__) ? _createStore(state) : state);
    return globalStore;
}
exports._initGlobalStore = _initGlobalStore;
function checkGlobalMixinStore(store) {
    if (!store)
        return;
    _initGlobalStore(store);
}
exports.checkGlobalMixinStore = checkGlobalMixinStore;
function injectStore(_a) {
    var options = _a.options, mixinStore = _a.mixinStore, storeTool = _a.storeTool, _b = _a.global, global = _b === void 0 ? false : _b;
    var store = ((global) ? globalStore : (options.store || mixinStore));
    if (!store)
        return;
    if (!storeTool._store) {
        storeTool._store = {};
    }
    ;
    storeTool._store[store.__._id] = {
        store: store,
        ignoreList: util_1.mapToTarget({
            data: store.state,
            target: options.data
        })
    };
}
exports.injectStore = injectStore;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzdG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFXQSwrQkFBb0Q7QUFFcEQsSUFBSSxXQUFtQixDQUFDO0FBQ3hCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQztBQUNoQixTQUFnQixZQUFZLENBQUUsS0FBWTtJQUN0QyxJQUFNLFNBQVMsR0FBRyxFQUFFLE9BQU8sQ0FBQztJQUU1QixJQUFNLE9BQU8sR0FBb0IsRUFBRSxDQUFDO0lBQ3BDLElBQU0sUUFBUSxHQUFHLFVBQUMsV0FBbUI7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN2QixPQUFPLENBQUMsV0FBVyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDekQ7UUFDRCxPQUFPLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUM7SUFDSSxJQUFBLEtBQTZDLHNCQUFlLEVBQVMsRUFBcEUsWUFBWSxrQkFBQSxFQUFFLFVBQVUsZ0JBQUEsRUFBRSxjQUFjLG9CQUE0QixDQUFDO0lBRTVFLElBQU0sV0FBVyxHQUFHLFVBQ2hCLEtBQWUsRUFBRSxLQUFVLEVBQUUsV0FBbUIsRUFBRSxVQUFvQjtRQUV0RSxJQUFJLElBQUksR0FBRyxLQUFLLENBQUM7UUFDakIsSUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDOUIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQVksRUFBRSxLQUFhOztZQUN0QyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ25CLFVBQVUsV0FBRSxHQUFDLFdBQVcsSUFBRyxLQUFLLE9BQUcsVUFBVSxDQUFDLENBQUM7YUFDbEQ7aUJBQU07Z0JBQ0gsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FB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LENBQUMsR0FBRyxDQUFDLEdBQUc7UUFDN0IsS0FBSyxPQUFBO1FBQ0wsVUFBVSxFQUFFLGtCQUFXLENBQUM7WUFDcEIsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxPQUFPLENBQUMsSUFBSTtTQUN2QixDQUFDO0tBQ0wsQ0FBQztBQUNOLENBQUM7QUFyQkQsa0NBcUJDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjogdGFja2NoZW5cclxuICogQERhdGU6IDIwMjEtMDUtMDEgMjA6Mjk6NDdcclxuICogQExhc3RFZGl0b3JzOiB0aGVhamFja1xyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDIxLTA1LTEyIDAwOjU3OjM5XHJcbiAqIEBGaWxlUGF0aDogXFxtcC1taXhpblxcc3JjXFxzdG9yZS50c1xyXG4gKiBARGVzY3JpcHRpb246IOeKtuaAgeWFseS6q1xyXG4gKi9cclxuXHJcbmltcG9ydCB7VEFSR0VUX1RZUEV9IGZyb20gJy4vY29uc3RhbnQnO1xyXG5pbXBvcnQge0lDb21wb25lbnRPcHRpb24sIElDb250ZXh0LCBJSnNvbiwgSVBhZ2VPcHRpb24sIElTdG9yZX0gZnJvbSAnLi90eXBlJztcclxuaW1wb3J0IHttYXBUb1RhcmdldCwgY3JlYXRFdmVudFJlYWR5fSBmcm9tICcuL3V0aWwnO1xyXG5cclxubGV0IGdsb2JhbFN0b3JlOiBJU3RvcmU7XHJcbmxldCBzdG9yZUlkID0gMDtcclxuZXhwb3J0IGZ1bmN0aW9uIF9jcmVhdGVTdG9yZSAoc3RhdGU6IElKc29uKTogSVN0b3JlIHtcclxuICAgIGNvbnN0IGN1cnJlbnRJZCA9ICsrc3RvcmVJZDtcclxuICAgIC8vIOe8k+WtmHNldERhdGEga2V5XHJcbiAgICBjb25zdCBhdHRyTWFwOiBJSnNvbjxzdHJpbmdbXT4gPSB7fTtcclxuICAgIGNvbnN0IGdldEF0dHJzID0gKHNldERhdGFBdHRyOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBpZiAoIWF0dHJNYXBbc2V0RGF0YUF0dHJdKSB7XHJcbiAgICAgICAgICAgIGF0dHJNYXBbc2V0RGF0YUF0dHJdID0gaGFuZGxlU2V0RGF0YUF0dHIoc2V0RGF0YUF0dHIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXR0ck1hcFtzZXREYXRhQXR0cl07XHJcbiAgICB9O1xyXG4gICAgY29uc3Qge29uRXZlbnRSZWFkeSwgZXZlbnRSZWFkeSwgcmVtb3ZlTGlzdGVuZXJ9ID0gY3JlYXRFdmVudFJlYWR5PElKc29uPigpO1xyXG5cclxuICAgIGNvbnN0IG1vZGlmeVN0YXRlID0gKFxyXG4gICAgICAgIGF0dHJzOiBzdHJpbmdbXSwgdmFsdWU6IGFueSwgc2V0RGF0YUF0dHI6IHN0cmluZywgbmV3Q29udGV4dDogSUNvbnRleHRcclxuICAgICkgPT4ge1xyXG4gICAgICAgIGxldCBkYXRhID0gc3RhdGU7XHJcbiAgICAgICAgY29uc3QgbGFzdCA9IGF0dHJzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgYXR0cnMuZm9yRWFjaCgoYXR0cjogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gbGFzdCkge1xyXG4gICAgICAgICAgICAgICAgZGF0YVthdHRyXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZXZlbnRSZWFkeSh7W3NldERhdGFBdHRyXTogdmFsdWV9LCBuZXdDb250ZXh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZGF0YVthdHRyXSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIHNldERhdGE6JHtzZXREYXRhQXR0cn1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhW2F0dHJdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgc3RhdGUsXHJcbiAgICAgICAgX186IHtcclxuICAgICAgICAgICAgX2lkOiBjdXJyZW50SWQsXHJcbiAgICAgICAgICAgIF9pbmplY3RDb250ZXh0IChjdXJyZW50Q29udGV4dDogSUNvbnRleHQsIHN0b3JlVG9vbDogSUpzb24sIHR5cGU6IFRBUkdFVF9UWVBFKSB7XHJcbiAgICAgICAgICAgICAgICBoYWNrU2V0RGF0YShjdXJyZW50Q29udGV4dCwgY3VycmVudElkLCBzdG9yZVRvb2wpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBvbkV2ZW50UmVhZHkoKGRhdGEsIG5ld0NvbnRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAhIOS7heWvueWFtuS7lumhtemdouaIlue7hOS7tui/m+ihjOWHuuWPkSBzZXREYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRDb250ZXh0ICE9PSBuZXdDb250ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdvbkV2ZW50UmVhZHknLCBkYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RvcmVUb29sLl9uYXRpdmVTZXREYXRhLmNhbGwoY3VycmVudENvbnRleHQsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFRBUkdFVF9UWVBFLlBBR0UpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAhIOWvueW3sue7j+S4jeWGjeaYvuekuueahCBwYWdlIOWPlua2iOebkeWQrFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hdGl2ZVVubG9hZCA9IGN1cnJlbnRDb250ZXh0Lm9uVW5sb2FkO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb250ZXh0Lm9uVW5sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVVubG9hZC5jYWxsKGN1cnJlbnRDb250ZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB0b2RvIOacieW+heWinuWKoCDlr7nnu4Tku7blkoxwYWdl5Y6f5pyJ5bGe55qE5aSE55CGIOm7mOiupOaYr1BhZ2XkvJropobnm5Yg57uE5Lu25Lya5b+955WlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9kbyDmnInlvoVoYWNr57uE5Lu255qEZHRhY2hlZCDkuovku7bvvIzlnKjlhbbkuK0gcmVtb3ZlTGlzdGVuZXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgX2hpdFN0YXRlIChzZXREYXRhQXR0cjogc3RyaW5nLCB2YWx1ZTogYW55LCBpZ25vcmVMaXN0OiBzdHJpbmdbXSwgbmV3Q29udGV4dDogSUNvbnRleHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJzID0gZ2V0QXR0cnMoc2V0RGF0YUF0dHIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbW9kaWZ5QXR0ciA9IGF0dHJzWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZVttb2RpZnlBdHRyXSA9PT0gJ3VuZGVmaW5lZCcgfHwgaWdub3JlTGlzdC5pbmRleE9mKG1vZGlmeUF0dHIpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vZGlmeVN0YXRlKGF0dHJzLCB2YWx1ZSwgc2V0RGF0YUF0dHIsIG5ld0NvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59XHJcbi8vIHRvZG8g5pyJ5b6F5rWL6K+V57uE5Lu25bGA6YOo5L2/55SoIG1peGluXHJcbi8vIHRvZG8g5pyJ5b6F5rWL6K+V5aSa5LiqIHN0b3JlIOWcqOS4gOS4que7hOS7tuaIluiAhXBhZ2XkuIrnmoTlnLrmma/vvIzljIXlkKvlsYDpg6ggKyDlhajlsYDvvJvlpJrkuKrlsYDpg6gr5YWo5bGA77yb5aSa5Liq5bGA6YOo5LiJ5Liq5Zy65pmvXHJcbmZ1bmN0aW9uIGhhY2tTZXREYXRhIChjb250ZXh0OiBJQ29udGV4dCwgc3RvcmVJZDogbnVtYmVyLCBzdG9yZVRvb2w6IElKc29uKSB7XHJcbiAgICBjb25zdCBuYXRpdmVTZXREYXRhID0gY29udGV4dC5zZXREYXRhO1xyXG4gICAgLy8gISBfc2V0RGF0YUxpc3Qg6ZyA6KaB5oyC5ZyoIGNvbnRleHTkuIrogIzkuI3og73mjILlnKhzdG9yZVRvb2zkuIog5Zug5Li65q+P5qyhb25sb2Fk5Ye65p2l55qE6YO95piv5LiA5Liq5paw55qEY29udGV4dFxyXG4gICAgLy8gISDogIwgc3RvcmVUb29sIOaYr+WQjOS4gOS4qlxyXG4gICAgaWYgKCFjb250ZXh0Ll9zZXREYXRhTGlzdCkge1xyXG4gICAgICAgIGNvbnRleHQuX3NldERhdGFMaXN0ID0gW107XHJcbiAgICAgICAgc3RvcmVUb29sLl9uYXRpdmVTZXREYXRhID0gbmF0aXZlU2V0RGF0YTtcclxuICAgICAgICBjb250ZXh0LnNldERhdGEgPSAoZGF0YSwgY2FsbGJhY2spID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5fc2V0RGF0YUxpc3QuZm9yRWFjaCgoZm46IEZ1bmN0aW9uKSA9PiBmbihkYXRhKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCduYXRpdmVTZXREYXRhLmNhbGwoY29udGV4dCwgZGF0YSwgY2FsbGJhY2spOycsIGRhdGEpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmF0aXZlU2V0RGF0YS5jYWxsKGNvbnRleHQsIGRhdGEsIGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgY29udGV4dC5fc2V0RGF0YUxpc3QucHVzaCgoZGF0YTogSUpzb24pID0+IHtcclxuICAgICAgICBjb25zdCB7c3RvcmUsIGlnbm9yZUxpc3R9ID0gc3RvcmVUb29sLl9zdG9yZVtzdG9yZUlkXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGsgaW4gZGF0YSkge1xyXG4gICAgICAgICAgICBzdG9yZS5fXy5faGl0U3RhdGUoaywgZGF0YVtrXSwgaWdub3JlTGlzdCwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVNldERhdGFBdHRyIChhdHRyOiBzdHJpbmcpIHtcclxuICAgIGF0dHIgPSBhdHRyLnJlcGxhY2UoL1xcWy9nLCAnLicpLnJlcGxhY2UoL1xcXS9nLCAnJyk7XHJcbiAgICByZXR1cm4gYXR0ci5zcGxpdCgnLicpO1xyXG59XHJcblxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRTdG9yZUhhY2tlciAoe1xyXG4gICAgb3B0aW9ucyxcclxuICAgIHR5cGUsXHJcbiAgICBzdG9yZVRvb2wsXHJcbn06IHtcclxuICAgIG9wdGlvbnM6IElQYWdlT3B0aW9uO1xyXG4gICAgdHlwZTogVEFSR0VUX1RZUEU7XHJcbiAgICBzdG9yZVRvb2w6IElKc29uO1xyXG59KSB7XHJcbiAgICBjb25zdCBzdG9yZXMgPSBzdG9yZVRvb2wuX3N0b3JlO1xyXG4gICAgaWYgKHN0b3Jlcykge1xyXG4gICAgICAgIGZvciAoY29uc3QgayBpbiBzdG9yZXMpIHtcclxuICAgICAgICAgICAgaGFuZGxlU3RvcmUoe1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucyxcclxuICAgICAgICAgICAgICAgIHN0b3JlOiBzdG9yZXNba10uc3RvcmUsXHJcbiAgICAgICAgICAgICAgICB0eXBlLFxyXG4gICAgICAgICAgICAgICAgc3RvcmVUb29sXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gcmVhZE9ubG9hZExpZmVUaW1lIChvcHRpb25zOiBJUGFnZU9wdGlvbiB8IElDb21wb25lbnRPcHRpb24sIHR5cGU6IFRBUkdFVF9UWVBFKSB7XHJcbiAgICBpZiAodHlwZSA9PT0gVEFSR0VUX1RZUEUuUEFHRSkge1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zLm9uTG9hZDtcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gVEFSR0VUX1RZUEUuQ09NUE9ORU5UKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMubGlmZXRpbWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmxpZmV0aW1lcy5hdHRhY2hlZDsgLy8g5L2/55SoYXR0YWNoZWQg6ICM5LiN5L2/55SoIGNyZWF0ZWTvvIzlm6DkuLpjcmVhdGVk5Lit5LiN5Y+v5L2/55Soc2V0RGF0YVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG59XHJcblxyXG5mdW5jdGlvbiB3cml0ZU9ubG9hZExpZmVUaW1lIChcclxuICAgIG9wdGlvbnM6IElQYWdlT3B0aW9uIHwgSUNvbXBvbmVudE9wdGlvbixcclxuICAgIHR5cGU6IFRBUkdFVF9UWVBFLFxyXG4gICAgZnVuYzogKHRoaXM6IElDb250ZXh0KSA9PiB2b2lkXHJcbikge1xyXG4gICAgaWYgKHR5cGUgPT09IFRBUkdFVF9UWVBFLlBBR0UpIHtcclxuICAgICAgICBvcHRpb25zLm9uTG9hZCA9IGZ1bmM7XHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRBUkdFVF9UWVBFLkNPTVBPTkVOVCkge1xyXG4gICAgICAgIGlmICghb3B0aW9ucy5saWZldGltZXMpIHtvcHRpb25zLmxpZmV0aW1lcyA9IHt9O31cclxuICAgICAgICBvcHRpb25zLmxpZmV0aW1lcy5hdHRhY2hlZCA9IGZ1bmM7XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhbmRsZVN0b3JlICh7XHJcbiAgICBvcHRpb25zLFxyXG4gICAgc3RvcmUsXHJcbiAgICB0eXBlLFxyXG4gICAgc3RvcmVUb29sLFxyXG59OiB7XHJcbiAgICBvcHRpb25zOiBJUGFnZU9wdGlvbiB8IElDb21wb25lbnRPcHRpb247XHJcbiAgICBzdG9yZTogSVN0b3JlO1xyXG4gICAgdHlwZTogVEFSR0VUX1RZUEU7XHJcbiAgICBzdG9yZVRvb2w6IElKc29uO1xyXG59KSB7XHJcbiAgICBpZiAoIXN0b3JlKSByZXR1cm47XHJcbiAgICBjb25zdCBzZXREYXRhSGFja2VyID0gZnVuY3Rpb24gKHRoaXM6IElDb250ZXh0KSB7XHJcbiAgICAgICAgc3RvcmUuX18uX2luamVjdENvbnRleHQodGhpcywgc3RvcmVUb29sLCB0eXBlKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBuYXRpdmVPbkxvYWQgPSByZWFkT25sb2FkTGlmZVRpbWUob3B0aW9ucywgdHlwZSk7XHJcbiAgICBpZiAoIW5hdGl2ZU9uTG9hZCkgeyAvLyDliqvmjIFvbkxvYWTmnaXms6jlhaVzZXREYXRhXHJcbiAgICAgICAgd3JpdGVPbmxvYWRMaWZlVGltZShvcHRpb25zLCB0eXBlLCBzZXREYXRhSGFja2VyKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKCFzdG9yZVRvb2wuX29uTG9hZExpc3QpIHtcclxuICAgICAgICAgICAgc3RvcmVUb29sLl9vbkxvYWRMaXN0ID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IG9uTG9hZEhhY2tlciA9IGZ1bmN0aW9uICh0aGlzOiBJQ29udGV4dCwgLi4uYXJnczogYW55W10pIHtcclxuICAgICAgICAgICAgICAgIHN0b3JlVG9vbC5fb25Mb2FkTGlzdC5mb3JFYWNoKChmbjogKHRoaXM6IElDb250ZXh0KSA9PiB2b2lkKSA9PiBmbi5jYWxsKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIG5hdGl2ZU9uTG9hZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgd3JpdGVPbmxvYWRMaWZlVGltZShvcHRpb25zLCB0eXBlLCBvbkxvYWRIYWNrZXIpO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICBzdG9yZVRvb2wuX29uTG9hZExpc3QucHVzaChzZXREYXRhSGFja2VyKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gX2luaXRHbG9iYWxTdG9yZSAoc3RhdGU6IElKc29uIHwgSVN0b3JlKSB7XHJcbiAgICBnbG9iYWxTdG9yZSA9ICgoIXN0YXRlLl9fKSA/IF9jcmVhdGVTdG9yZShzdGF0ZSkgOiBzdGF0ZSkgYXMgSVN0b3JlO1xyXG4gICAgcmV0dXJuIGdsb2JhbFN0b3JlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tHbG9iYWxNaXhpblN0b3JlIChzdG9yZT86IElKc29uIHwgSVN0b3JlKSB7XHJcbiAgICBpZiAoIXN0b3JlKSByZXR1cm47XHJcbiAgICBfaW5pdEdsb2JhbFN0b3JlKHN0b3JlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdFN0b3JlICh7XHJcbiAgICBvcHRpb25zLFxyXG4gICAgbWl4aW5TdG9yZSxcclxuICAgIHN0b3JlVG9vbCxcclxuICAgIGdsb2JhbCA9IGZhbHNlLFxyXG59OiB7XHJcbiAgICBvcHRpb25zOiBJUGFnZU9wdGlvbjtcclxuICAgIG1peGluU3RvcmU/OiBJU3RvcmUgfCBJSnNvbjxhbnk+O1xyXG4gICAgc3RvcmVUb29sOiBJSnNvbjtcclxuICAgIGdsb2JhbD86IGJvb2xlYW47XHJcbn0pIHtcclxuICAgIGNvbnN0IHN0b3JlID0gKChnbG9iYWwpID8gZ2xvYmFsU3RvcmUgOiAob3B0aW9ucy5zdG9yZSB8fCBtaXhpblN0b3JlKSkgYXMgSVN0b3JlO1xyXG4gICAgaWYgKCFzdG9yZSkgcmV0dXJuO1xyXG4gICAgaWYgKCFzdG9yZVRvb2wuX3N0b3JlKSB7c3RvcmVUb29sLl9zdG9yZSA9IHt9O307XHJcbiAgICBzdG9yZVRvb2wuX3N0b3JlW3N0b3JlLl9fLl9pZF0gPSB7XHJcbiAgICAgICAgc3RvcmUsXHJcbiAgICAgICAgaWdub3JlTGlzdDogbWFwVG9UYXJnZXQoe1xyXG4gICAgICAgICAgICBkYXRhOiBzdG9yZS5zdGF0ZSxcclxuICAgICAgICAgICAgdGFyZ2V0OiBvcHRpb25zLmRhdGFcclxuICAgICAgICB9KVxyXG4gICAgfTtcclxufSJdfQ==